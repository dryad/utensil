{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nimport { Network } from \"vis-network\";\nimport { DataSet } from \"vis-data\";\nimport { NODE_COLORS } from \"constants/colors\";\nexport default class VisCustomNetwork extends EventTarget {\n  constructor(dom) {\n    super();\n    this.dom = void 0;\n    this.network = void 0;\n    this.nodes = void 0;\n    this.edges = void 0;\n    this.options = void 0;\n\n    this.setData = data => {\n      this.nodes.clear();\n      this.edges.clear();\n      this.nodes.add(data.nodes);\n      this.edges.add(data.edges);\n      this.network = new Network(this.dom, {\n        nodes: this.nodes,\n        edges: this.edges\n      }, this.options);\n      data.nodes.forEach(node => {\n        this.network.moveNode(node.id, node.x, node.y);\n      });\n    };\n\n    this.addNode = (node, callback) => {\n      this.triggerEvent(\"add-node\", {\n        node,\n        callback\n      });\n    };\n\n    this.editNode = (node, callback) => {\n      this.triggerEvent(\"edit-node\", {\n        node,\n        callback\n      });\n    };\n\n    this.deleteNode = (data, callback) => {\n      const queue = [...data.nodes];\n\n      while (queue.length) {\n        const nodeId = queue.shift();\n        const connectedNodeIds = this.network.getConnectedNodes(nodeId);\n        const node = this.nodes.get(nodeId);\n\n        for (const connectedNodeId of connectedNodeIds) {\n          const connectedNode = this.nodes.get(connectedNodeId);\n\n          if (connectedNode.level > node.level && !data.nodes.includes(connectedNodeId)) {\n            data.nodes.push(connectedNodeId);\n            queue.push(connectedNodeId);\n          }\n        }\n      }\n\n      callback(data);\n    };\n\n    this.addEdge = (edge, callback) => {\n      this.triggerEvent(\"add-edge\", {\n        edge,\n        callback\n      });\n    };\n\n    this.on = (event, handler) => {\n      this.addEventListener(event, e => {\n        if (handler) {\n          handler(e.detail);\n        }\n      });\n    };\n\n    this.triggerEvent = (name, payload = {}) => {\n      this.dispatchEvent(new CustomEvent(name, {\n        detail: payload\n      }));\n    };\n\n    this.dom = dom;\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.options = {\n      manipulation: {\n        enabled: true,\n        addNode: this.addNode,\n        editNode: this.editNode,\n        deleteNode: this.deleteNode,\n        addEdge: this.addEdge,\n        editEdge: false,\n        deleteEdge: false\n      },\n      interaction: {\n        selectConnectedEdges: false\n      },\n      edges: {\n        color: \"#411811\",\n        chosen: false\n      },\n      physics: {\n        enabled: false\n      }\n    };\n    this.network = new Network(dom, {\n      nodes: this.nodes,\n      edges: this.edges\n    }, this.options);\n    this.on(\"node-added\", ({\n      callback,\n      node\n    }) => {\n      callback(node);\n    });\n    this.on(\"edge-added\", ({\n      callback,\n      edge\n    }) => {\n      const from = this.nodes.get(edge.from);\n      const to = this.nodes.get(edge.to);\n      const {\n        arrows\n      } = edge;\n      const id = uuidv4();\n      const level = Math.max(from.level, to.level) + 1;\n      const middle = {\n        id,\n        label: \"\",\n        level,\n        color: NODE_COLORS[level],\n        opacity: 0.5,\n        x: (from.x + to.x) / 2,\n        y: (from.y + to.y) / 2\n      };\n      this.nodes.add(middle);\n      this.edges.add([{\n        from: from.id,\n        to: id\n      }, {\n        from: id,\n        to: to.id,\n        arrows\n      }]);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/gaga/clarity/src/libs/vis-custom-network/VisCustomNetwork.ts"],"names":["v4","uuidv4","Network","DataSet","NODE_COLORS","VisCustomNetwork","EventTarget","constructor","dom","network","nodes","edges","options","setData","data","clear","add","forEach","node","moveNode","id","x","y","addNode","callback","triggerEvent","editNode","deleteNode","queue","length","nodeId","shift","connectedNodeIds","getConnectedNodes","get","connectedNodeId","connectedNode","level","includes","push","addEdge","edge","on","event","handler","addEventListener","e","detail","name","payload","dispatchEvent","CustomEvent","manipulation","enabled","editEdge","deleteEdge","interaction","selectConnectedEdges","color","chosen","physics","from","to","arrows","Math","max","middle","label","opacity"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport { Network } from \"vis-network\";\nimport { DataSet } from \"vis-data\";\n\nimport { NODE_COLORS } from \"constants/colors\";\n\nexport default class VisCustomNetwork extends EventTarget {\n  dom: HTMLElement;\n  network: Network;\n  nodes: DataSet;\n  edges: DataSet;\n  options: any;\n\n  constructor(dom: HTMLElement) {\n    super();\n    this.dom = dom;\n    this.nodes = new DataSet();\n    this.edges = new DataSet();\n    this.options = {\n      manipulation: {\n        enabled: true,\n        addNode: this.addNode,\n        editNode: this.editNode,\n        deleteNode: this.deleteNode,\n        addEdge: this.addEdge,\n        editEdge: false,\n        deleteEdge: false,\n      },\n      interaction: {\n        selectConnectedEdges: false,\n      },\n      edges: {\n        color: \"#411811\",\n        chosen: false,\n      },\n      physics: {\n        enabled: false,\n      },\n    };\n    this.network = new Network(\n      dom,\n      { nodes: this.nodes, edges: this.edges },\n      this.options\n    );\n\n    this.on(\"node-added\", ({ callback, node }: any) => {\n      callback(node);\n    });\n\n    this.on(\"edge-added\", ({ callback, edge }: any) => {\n      const from = this.nodes.get(edge.from);\n      const to = this.nodes.get(edge.to);\n      const { arrows } = edge;\n\n      const id = uuidv4();\n      const level = Math.max(from.level, to.level) + 1;\n      const middle = {\n        id,\n        label: \"\",\n        level,\n        color: NODE_COLORS[level],\n        opacity: 0.5,\n        x: (from.x + to.x) / 2,\n        y: (from.y + to.y) / 2,\n      };\n\n      this.nodes.add(middle);\n\n      this.edges.add([\n        { from: from.id, to: id },\n        { from: id, to: to.id, arrows },\n      ]);\n    });\n  }\n\n  setData = (data: any): void => {\n    this.nodes.clear();\n    this.edges.clear();\n\n    this.nodes.add(data.nodes);\n    this.edges.add(data.edges);\n    this.network = new Network(\n      this.dom,\n      { nodes: this.nodes, edges: this.edges },\n      this.options\n    );\n\n    data.nodes.forEach((node) => {\n      this.network.moveNode(node.id, node.x, node.y);\n    });\n  };\n\n  addNode = (node: any, callback: any): void => {\n    this.triggerEvent(\"add-node\", { node, callback });\n  };\n\n  editNode = (node: any, callback: any): void => {\n    this.triggerEvent(\"edit-node\", { node, callback });\n  };\n\n  deleteNode = (data: any, callback: any): void => {\n    const queue = [...data.nodes];\n    while (queue.length) {\n      const nodeId = queue.shift();\n      const connectedNodeIds = this.network.getConnectedNodes(\n        nodeId\n      ) as string[];\n\n      const node = this.nodes.get(nodeId);\n      for (const connectedNodeId of connectedNodeIds) {\n        const connectedNode = this.nodes.get(connectedNodeId);\n        if (\n          connectedNode.level > node.level &&\n          !data.nodes.includes(connectedNodeId)\n        ) {\n          data.nodes.push(connectedNodeId);\n          queue.push(connectedNodeId);\n        }\n      }\n    }\n    callback(data);\n  };\n\n  addEdge = (edge: any, callback: any): void => {\n    this.triggerEvent(\"add-edge\", { edge, callback });\n  };\n\n  /***************************\n   * Custom Event Management *\n   ***************************/\n  on = (event: string, handler: Function): void => {\n    this.addEventListener(event, (e: any) => {\n      if (handler) {\n        handler(e.detail);\n      }\n    });\n  };\n\n  triggerEvent = (name: string, payload: object = {}): void => {\n    this.dispatchEvent(new CustomEvent(name, { detail: payload }));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}