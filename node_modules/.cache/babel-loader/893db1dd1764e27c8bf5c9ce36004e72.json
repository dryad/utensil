{"ast":null,"code":"var _jsxFileName = \"/Users/gaga/clarity/src/components/VisNetwork.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, forwardRef } from \"react\";\nimport { NODE_COLORS } from \"constants/colors\";\nimport VisCustomNetwork from \"libs/vis-custom-network\";\nimport NodeDialog from \"./NodeDialog\";\nimport EdgeDialog from \"./EdgeDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VisNetwork = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const domRef = useRef(null);\n  const [nodeDialogTitle, setNodeDialogTitle] = useState(\"\");\n  const [nodeDialogLabel, setNodeDialogLabel] = useState(\"\");\n  const [nodeDialogOpen, setNodeDialogOpen] = useState(false);\n  const nodeFnRef = useRef(null);\n  const nodeRef = useRef(null);\n  const [edgeDialogTitle, setEdgeDialogTitle] = useState(\"\");\n  const [edgeDialogDirected, setEdgeDialogDirected] = useState(1);\n  const [edgeDialogOpen, setEdgeDialogOpen] = useState(false);\n  const edgeFnRef = useRef(null);\n  const edgeRef = useRef(null);\n\n  const toggleNodeDialog = () => setNodeDialogOpen(!nodeDialogOpen);\n\n  const handleNodeDialogOk = label => () => {\n    var _ref$current;\n\n    const node = nodeRef.current;\n    node.label = label;\n\n    if (!node.level) {\n      node.level = 0;\n      node.color = NODE_COLORS[node.level];\n      node.font = {\n        color: \"#fff\"\n      };\n    }\n\n    (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.triggerEvent(\"node-added\", {\n      callback: nodeFnRef.current,\n      node\n    });\n    toggleNodeDialog();\n  };\n\n  const handleNodeDialogClose = () => {\n    nodeFnRef.current(nodeRef.current);\n    toggleNodeDialog();\n  };\n\n  const toggleEdgeDialog = () => setEdgeDialogOpen(!edgeDialogOpen);\n\n  const handleEdgeDialog = directed => () => {\n    var _ref$current2;\n\n    const edge = edgeRef.current;\n\n    if (directed) {\n      edge[\"arrows\"] = {\n        to: {\n          enabled: true,\n          type: \"arrow\"\n        }\n      };\n    }\n\n    (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.triggerEvent(\"edge-added\", {\n      callback: edgeFnRef.current,\n      edge\n    });\n    toggleEdgeDialog();\n  };\n\n  useEffect(() => {\n    if (!ref.current && domRef.current) {\n      ref.current = new VisCustomNetwork(domRef.current);\n      ref.current.on(\"add-node\", ({\n        node,\n        callback\n      }) => {\n        nodeFnRef.current = callback;\n        nodeRef.current = node;\n        setNodeDialogTitle(\"Add Node\");\n        setNodeDialogLabel(\"\");\n        setNodeDialogOpen(true);\n      });\n      ref.current.on(\"edit-node\", ({\n        node,\n        callback\n      }) => {\n        nodeFnRef.current = callback;\n        nodeRef.current = node;\n        setNodeDialogTitle(\"Edit Node\");\n        setNodeDialogLabel(node.label);\n        setNodeDialogOpen(true);\n      });\n      ref.current.on(\"add-edge\", ({\n        edge,\n        callback\n      }) => {\n        edgeFnRef.current = callback;\n        edgeRef.current = edge;\n        setEdgeDialogTitle(\"Add Edge\");\n        setEdgeDialogDirected(1);\n        setEdgeDialogOpen(true);\n      });\n    }\n  }, [ref]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: domRef,\n      style: {\n        height: `480px`,\n        width: `100%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(NodeDialog, {\n      open: nodeDialogOpen,\n      title: nodeDialogTitle,\n      label: nodeDialogLabel,\n      onClose: handleNodeDialogClose,\n      onOk: handleNodeDialogOk\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(EdgeDialog, {\n      open: edgeDialogOpen,\n      title: edgeDialogTitle,\n      directed: edgeDialogDirected,\n      onClose: toggleEdgeDialog,\n      onOk: handleEdgeDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"iDk9Lf3LJdy1/XqA2WEuSo+mqUs=\"));\n_c2 = VisNetwork;\nexport default VisNetwork;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VisNetwork$forwardRef\");\n$RefreshReg$(_c2, \"VisNetwork\");","map":{"version":3,"sources":["/Users/gaga/clarity/src/components/VisNetwork.tsx"],"names":["React","useState","useEffect","useRef","forwardRef","NODE_COLORS","VisCustomNetwork","NodeDialog","EdgeDialog","VisNetwork","props","ref","domRef","nodeDialogTitle","setNodeDialogTitle","nodeDialogLabel","setNodeDialogLabel","nodeDialogOpen","setNodeDialogOpen","nodeFnRef","nodeRef","edgeDialogTitle","setEdgeDialogTitle","edgeDialogDirected","setEdgeDialogDirected","edgeDialogOpen","setEdgeDialogOpen","edgeFnRef","edgeRef","toggleNodeDialog","handleNodeDialogOk","label","node","current","level","color","font","triggerEvent","callback","handleNodeDialogClose","toggleEdgeDialog","handleEdgeDialog","directed","edge","to","enabled","type","on","height","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef } from \"react\";\n\nimport { Node, Edge } from \"models\";\nimport { NODE_COLORS } from \"constants/colors\";\nimport VisCustomNetwork from \"libs/vis-custom-network\";\nimport NodeDialog from \"./NodeDialog\";\nimport EdgeDialog from \"./EdgeDialog\";\n\ntype INetworkProps = {\n  ref: any;\n  nodes?: Node[];\n  edges?: Edge[];\n  onSelectNode?: Function;\n};\n\nconst VisNetwork: React.FC<INetworkProps> = forwardRef(\n  (props: INetworkProps, ref: any) => {\n    const domRef = useRef<HTMLDivElement>(null);\n\n    const [nodeDialogTitle, setNodeDialogTitle] = useState(\"\");\n    const [nodeDialogLabel, setNodeDialogLabel] = useState(\"\");\n    const [nodeDialogOpen, setNodeDialogOpen] = useState(false);\n    const nodeFnRef = useRef<Function | null>(null);\n    const nodeRef = useRef<any>(null);\n\n    const [edgeDialogTitle, setEdgeDialogTitle] = useState(\"\");\n    const [edgeDialogDirected, setEdgeDialogDirected] = useState(1);\n    const [edgeDialogOpen, setEdgeDialogOpen] = useState(false);\n    const edgeFnRef = useRef<Function | null>(null);\n    const edgeRef = useRef<any>(null);\n\n    const toggleNodeDialog = () => setNodeDialogOpen(!nodeDialogOpen);\n\n    const handleNodeDialogOk = (label: any) => () => {\n      const node = nodeRef.current;\n      node.label = label;\n      if (!node.level) {\n        node.level = 0;\n        node.color = NODE_COLORS[node.level];\n        node.font = { color: \"#fff\" };\n      }\n\n      ref.current?.triggerEvent(\"node-added\", {\n        callback: nodeFnRef.current,\n        node,\n      });\n\n      toggleNodeDialog();\n    };\n\n    const handleNodeDialogClose = () => {\n      nodeFnRef.current(nodeRef.current);\n      toggleNodeDialog();\n    }\n\n    const toggleEdgeDialog = () => setEdgeDialogOpen(!edgeDialogOpen);\n\n    const handleEdgeDialog = (directed: number) => () => {\n      const edge = edgeRef.current;\n\n      if (directed) {\n        edge[\"arrows\"] = { to: { enabled: true, type: \"arrow\" } };\n      }\n\n      ref.current?.triggerEvent(\"edge-added\", {\n        callback: edgeFnRef.current,\n        edge,\n      });\n\n      toggleEdgeDialog();\n    };\n\n    useEffect(() => {\n      if (!ref.current && domRef.current) {\n        ref.current = new VisCustomNetwork(domRef.current);\n\n        ref.current.on(\"add-node\", ({ node, callback }: any) => {\n          nodeFnRef.current = callback;\n          nodeRef.current = node;\n\n          setNodeDialogTitle(\"Add Node\");\n          setNodeDialogLabel(\"\");\n          setNodeDialogOpen(true);\n        });\n\n        ref.current.on(\"edit-node\", ({ node, callback }: any) => {\n          nodeFnRef.current = callback;\n          nodeRef.current = node;\n\n          setNodeDialogTitle(\"Edit Node\");\n          setNodeDialogLabel(node.label);\n          setNodeDialogOpen(true);\n        });\n\n        ref.current.on(\"add-edge\", ({ edge, callback }: any) => {\n          edgeFnRef.current = callback;\n          edgeRef.current = edge;\n\n          setEdgeDialogTitle(\"Add Edge\");\n          setEdgeDialogDirected(1);\n          setEdgeDialogOpen(true);\n        });\n      }\n    }, [ref]);\n\n    return (\n      <>\n        <div ref={domRef} style={{ height: `480px`, width: `100%` }} />\n        <NodeDialog\n          open={nodeDialogOpen}\n          title={nodeDialogTitle}\n          label={nodeDialogLabel}\n          onClose={handleNodeDialogClose}\n          onOk={handleNodeDialogOk}\n        />\n        <EdgeDialog\n          open={edgeDialogOpen}\n          title={edgeDialogTitle}\n          directed={edgeDialogDirected}\n          onClose={toggleEdgeDialog}\n          onOk={handleEdgeDialog}\n        />\n      </>\n    );\n  }\n);\n\nexport default VisNetwork;\n"]},"metadata":{},"sourceType":"module"}