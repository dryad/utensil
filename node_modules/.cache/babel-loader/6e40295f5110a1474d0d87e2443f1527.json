{"ast":null,"code":"var _jsxFileName = \"/Users/gaga/clarity/src/components/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Container, Paper, Box, Button, Grid, TextField, Card, CardContent, Typography } from \"@material-ui/core\";\nimport axios from \"libs/axios\";\nimport VisNetwork from \"./VisNetwork\";\nimport GraphList from \"./GraphList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const networkRef = useRef(null);\n  const [graphs, setGraphs] = useState([]);\n  const [graph, setGraph] = useState(null);\n  const [graphName, setGraphName] = useState(\"\");\n  const [graphNote, setGraphNote] = useState(\"\");\n\n  const refreshList = async () => {\n    const {\n      data\n    } = await axios.get(\"/api/graphs/\");\n    setGraphs(data);\n  };\n\n  const handleGraphSelected = id => {\n    const graph = graphs === null || graphs === void 0 ? void 0 : graphs.find(g => g.id === id);\n\n    if (graph !== null) {\n      var _networkRef$current;\n\n      setGraph(graph);\n      const data = JSON.parse(graph === null || graph === void 0 ? void 0 : graph.data);\n      (_networkRef$current = networkRef.current) === null || _networkRef$current === void 0 ? void 0 : _networkRef$current.setData(data);\n    }\n  };\n\n  const handleGraphDelete = async id => {\n    await axios.delete(`/api/graphs/${id}/`);\n    await refreshList();\n  };\n\n  const handleSave = async () => {\n    var _networkRef$current2, _networkRef$current3, _networkRef$current4;\n\n    // const clone = _.cloneDeepWith(networkRef.current?.network, (x: any) => {\n    //   return x;\n    // });\n    // const edges = clone.body.data.edges.get();\n    // const nodes = clone.body.data.nodes.get();\n    const edges = (_networkRef$current2 = networkRef.current) === null || _networkRef$current2 === void 0 ? void 0 : _networkRef$current2.edges.get();\n    const nodes = (_networkRef$current3 = networkRef.current) === null || _networkRef$current3 === void 0 ? void 0 : _networkRef$current3.nodes.get();\n    const positions = (_networkRef$current4 = networkRef.current) === null || _networkRef$current4 === void 0 ? void 0 : _networkRef$current4.network.getPositions();\n\n    for (const node of nodes) {\n      node.x = positions[node.id].x;\n      node.y = positions[node.id].y;\n    }\n\n    console.log(nodes);\n    await axios.post(\"/api/graphs/\", {\n      name: graphName,\n      note: graphNote,\n      data: JSON.stringify({\n        edges,\n        nodes\n      })\n    });\n    await refreshList();\n  };\n\n  useEffect(() => {\n    refreshList();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          children: [/*#__PURE__*/_jsxDEV(VisNetwork, {\n            ref: networkRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            m: 1,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-basic\",\n              label: \"Graph Name\",\n              variant: \"outlined\",\n              size: \"small\",\n              value: graphName,\n              onChange: e => setGraphName(e.target.value),\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            m: 1,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"outlined-basic\",\n              label: \"Note\",\n              multiline: true,\n              rows: 4,\n              variant: \"outlined\",\n              size: \"small\",\n              value: graphNote,\n              onChange: e => setGraphNote(e.target.value),\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"primary\",\n              onClick: handleSave,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: [/*#__PURE__*/_jsxDEV(GraphList, {\n          graphs: graphs,\n          onGraphSelected: handleGraphSelected,\n          onGraphDelete: handleGraphDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), graph && /*#__PURE__*/_jsxDEV(Card, {\n          variant: \"outlined\",\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              component: \"h2\",\n              children: \"Note\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              component: \"p\",\n              children: graph.note\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FBac4JynNvjC4SoTAHaV6fo5VMY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gaga/clarity/src/components/App.tsx"],"names":["React","useRef","useState","useEffect","Container","Paper","Box","Button","Grid","TextField","Card","CardContent","Typography","axios","VisNetwork","GraphList","App","networkRef","graphs","setGraphs","graph","setGraph","graphName","setGraphName","graphNote","setGraphNote","refreshList","data","get","handleGraphSelected","id","find","g","JSON","parse","current","setData","handleGraphDelete","delete","handleSave","edges","nodes","positions","network","getPositions","node","x","y","console","log","post","name","note","stringify","e","target","value"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport {\n  Container,\n  Paper,\n  Box,\n  Button,\n  Grid,\n  TextField,\n  Card,\n  CardContent,\n  Typography,\n} from \"@material-ui/core\";\n\nimport { Graph } from \"models\";\nimport axios from \"libs/axios\";\nimport VisCustomNetwork from \"libs/vis-custom-network\";\nimport VisNetwork from \"./VisNetwork\";\nimport GraphList from \"./GraphList\";\n\nfunction App() {\n  const networkRef = useRef<VisCustomNetwork | null>(null);\n\n  const [graphs, setGraphs] = useState<Graph[]>([]);\n  const [graph, setGraph] = useState<Graph | null>(null);\n  const [graphName, setGraphName] = useState(\"\");\n  const [graphNote, setGraphNote] = useState(\"\");\n\n  const refreshList = async () => {\n    const { data } = await axios.get(\"/api/graphs/\");\n    setGraphs(data);\n  };\n\n  const handleGraphSelected = (id: any) => {\n    const graph = graphs?.find((g: any) => g.id === id);\n    if (graph !== null) {\n      setGraph(graph);\n      const data = JSON.parse(graph?.data);\n      networkRef.current?.setData(data);\n    }\n  };\n\n  const handleGraphDelete = async (id: any) => {\n    await axios.delete(`/api/graphs/${id}/`);\n    await refreshList();\n  };\n\n  const handleSave = async () => {\n    // const clone = _.cloneDeepWith(networkRef.current?.network, (x: any) => {\n    //   return x;\n    // });\n    // const edges = clone.body.data.edges.get();\n    // const nodes = clone.body.data.nodes.get();\n\n    const edges = networkRef.current?.edges.get();\n    const nodes = networkRef.current?.nodes.get();\n    const positions = networkRef.current?.network.getPositions();\n\n    for (const node of nodes) {\n      node.x = positions[node.id].x;\n      node.y = positions[node.id].y;\n    }\n\n    console.log(nodes);\n\n    await axios.post(\"/api/graphs/\", {\n      name: graphName,\n      note: graphNote,\n      data: JSON.stringify({ edges, nodes }),\n    });\n\n    await refreshList();\n  };\n\n  useEffect(() => {\n    refreshList();\n  }, []);\n\n  return (\n    <Container>\n      <Grid container>\n        <Grid item xs={9}>\n          <Paper>\n            <VisNetwork ref={networkRef} />\n            <Box m={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Graph Name\"\n                variant=\"outlined\"\n                size=\"small\"\n                value={graphName}\n                onChange={(e: any) => setGraphName(e.target.value)}\n                fullWidth\n              />\n            </Box>\n            <Box m={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Note\"\n                multiline\n                rows={4}\n                variant=\"outlined\"\n                size=\"small\"\n                value={graphNote}\n                onChange={(e: any) => setGraphNote(e.target.value)}\n                fullWidth\n              />\n            </Box>\n            <Box>\n              <Button variant=\"outlined\" color=\"primary\" onClick={handleSave}>\n                Save\n              </Button>\n            </Box>\n          </Paper>\n        </Grid>\n        <Grid item xs={3}>\n          <GraphList\n            graphs={graphs}\n            onGraphSelected={handleGraphSelected}\n            onGraphDelete={handleGraphDelete}\n          />\n          {graph && (\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h6\" component=\"h2\">\n                  Note\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  {graph.note}\n                </Typography>\n              </CardContent>\n            </Card>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}