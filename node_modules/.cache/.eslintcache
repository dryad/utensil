[{"/Users/gaga/clarity/src/index.tsx":"1","/Users/gaga/clarity/src/reportWebVitals.js":"2","/Users/gaga/clarity/src/theme.ts":"3","/Users/gaga/clarity/src/components/App.tsx":"4","/Users/gaga/clarity/src/components/GraphList.tsx":"5","/Users/gaga/clarity/src/components/VisNetwork.tsx":"6","/Users/gaga/clarity/src/libs/axios.ts":"7","/Users/gaga/clarity/src/components/EdgeDialog.tsx":"8","/Users/gaga/clarity/src/components/NodeDialog.tsx":"9","/Users/gaga/clarity/src/constants/colors.ts":"10","/Users/gaga/clarity/src/libs/vis-custom-network/index.ts":"11","/Users/gaga/clarity/src/components/Dialog/index.tsx":"12","/Users/gaga/clarity/src/libs/vis-custom-network/VisCustomNetwork.ts":"13"},{"size":727,"mtime":1625317586165,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1625317586166,"results":"16","hashOfConfig":"15"},{"size":755,"mtime":1625317586166,"results":"17","hashOfConfig":"15"},{"size":3687,"mtime":1626736277865,"results":"18","hashOfConfig":"15"},{"size":1335,"mtime":1626559462280,"results":"19","hashOfConfig":"15"},{"size":3641,"mtime":1626559462280,"results":"20","hashOfConfig":"15"},{"size":142,"mtime":1625317586165,"results":"21","hashOfConfig":"15"},{"size":2102,"mtime":1626559462280,"results":"22","hashOfConfig":"15"},{"size":1327,"mtime":1626559462280,"results":"23","hashOfConfig":"15"},{"size":223,"mtime":1626559462281,"results":"24","hashOfConfig":"15"},{"size":84,"mtime":1625317586165,"results":"25","hashOfConfig":"15"},{"size":1481,"mtime":1626559462280,"results":"26","hashOfConfig":"15"},{"size":3499,"mtime":1626736277866,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f3e8js",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gaga/clarity/src/index.tsx",[],"/Users/gaga/clarity/src/reportWebVitals.js",[],"/Users/gaga/clarity/src/theme.ts",["56"],"import { red } from \"@material-ui/core/colors\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: \"light\",\n    // primary: {\n    //   main: \"#61dafb\",\n    //   light: \"#61dafb\",\n    //   dark: \"#21a1c4\",\n    // },\n    // secondary: {\n    //   main: \"#b5ecfb\",\n    //   light: \"#61dafb\",\n    //   dark: \"#21a1c4\",\n    // },\n    // error: {\n    //   main: red.A400,\n    // },\n    background: {\n      default: \"#282c34\",\n    },\n  },\n  overrides: {\n    MuiPaper: {\n      root: {\n        margin: \"10px\",\n        backgroundColor: \"#fff\", // 5d737e\n      },\n    },\n    MuiButton: {\n      root: {\n        margin: \"5px\",\n      },\n    },\n  },\n});\n\nexport default theme;\n","/Users/gaga/clarity/src/components/App.tsx",["57"],"import _ from \"lodash\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport {\n  Container,\n  Paper,\n  Box,\n  Button,\n  Grid,\n  TextField,\n  Card,\n  CardContent,\n  Typography,\n} from \"@material-ui/core\";\n\nimport { Graph } from \"models\";\nimport axios from \"libs/axios\";\nimport VisCustomNetwork from \"libs/vis-custom-network\";\nimport VisNetwork from \"./VisNetwork\";\nimport GraphList from \"./GraphList\";\n\nfunction App() {\n  const networkRef = useRef<VisCustomNetwork | null>(null);\n\n  const [graphs, setGraphs] = useState<Graph[]>([]);\n  const [graph, setGraph] = useState<Graph | null>(null);\n  const [graphName, setGraphName] = useState(\"\");\n  const [graphNote, setGraphNote] = useState(\"\");\n\n  const refreshList = async () => {\n    const { data } = await axios.get(\"/api/graphs/\");\n    setGraphs(data);\n  };\n\n  const handleGraphSelected = (id: any) => {\n    const graph = graphs?.find((g: any) => g.id === id);\n    if (graph !== null) {\n      setGraph(graph);\n      const data = JSON.parse(graph?.data);\n      networkRef.current?.setData(data);\n    }\n  };\n\n  const handleGraphDelete = async (id: any) => {\n    await axios.delete(`/api/graphs/${id}/`);\n    await refreshList();\n  };\n\n  const handleSave = async () => {\n    // const clone = _.cloneDeepWith(networkRef.current?.network, (x: any) => {\n    //   return x;\n    // });\n    // const edges = clone.body.data.edges.get();\n    // const nodes = clone.body.data.nodes.get();\n\n    const edges = networkRef.current?.edges.get();\n    const nodes = networkRef.current?.nodes.get();\n    const positions = networkRef.current?.network.getPositions();\n\n    for (const node of nodes) {\n      node.x = positions[node.id].x;\n      node.y = positions[node.id].y;\n    }\n\n    console.log(nodes);\n\n    await axios.post(\"/api/graphs/\", {\n      name: graphName,\n      note: graphNote,\n      data: JSON.stringify({ edges, nodes }),\n    });\n\n    await refreshList();\n  };\n\n  useEffect(() => {\n    refreshList();\n  }, []);\n\n  return (\n    <Container>\n      <Grid container>\n        <Grid item xs={9}>\n          <Paper>\n            <VisNetwork ref={networkRef} />\n            <Box m={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Graph Name\"\n                variant=\"outlined\"\n                size=\"small\"\n                value={graphName}\n                onChange={(e: any) => setGraphName(e.target.value)}\n                fullWidth\n              />\n            </Box>\n            <Box m={1}>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Note\"\n                multiline\n                rows={4}\n                variant=\"outlined\"\n                size=\"small\"\n                value={graphNote}\n                onChange={(e: any) => setGraphNote(e.target.value)}\n                fullWidth\n              />\n            </Box>\n            <Box>\n              <Button variant=\"outlined\" color=\"primary\" onClick={handleSave}>\n                Save\n              </Button>\n            </Box>\n          </Paper>\n        </Grid>\n        <Grid item xs={3}>\n          <GraphList\n            graphs={graphs}\n            onGraphSelected={handleGraphSelected}\n            onGraphDelete={handleGraphDelete}\n          />\n          {graph && (\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h6\" component=\"h2\">\n                  Note\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  {graph.note}\n                </Typography>\n              </CardContent>\n            </Card>\n          )}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","/Users/gaga/clarity/src/components/GraphList.tsx",[],"/Users/gaga/clarity/src/components/VisNetwork.tsx",[],"/Users/gaga/clarity/src/libs/axios.ts",[],"/Users/gaga/clarity/src/components/EdgeDialog.tsx",[],"/Users/gaga/clarity/src/components/NodeDialog.tsx",[],"/Users/gaga/clarity/src/constants/colors.ts",[],"/Users/gaga/clarity/src/libs/vis-custom-network/index.ts",[],"/Users/gaga/clarity/src/components/Dialog/index.tsx",[],"/Users/gaga/clarity/src/libs/vis-custom-network/VisCustomNetwork.ts",[],{"ruleId":"58","severity":1,"message":"59","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":13},{"ruleId":"58","severity":1,"message":"62","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":9},"@typescript-eslint/no-unused-vars","'red' is defined but never used.","Identifier","unusedVar","'_' is defined but never used."]